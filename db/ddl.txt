create table AvgProductsSold_mv
(
    idPackage        int                         not null
        primary key,
    name             varchar(256)                not null,
    avgNumOfProducts decimal(16, 2) default 0.00 not null
);

create table BestSellerProduct_mv
(
    idProduct    int                         not null
        primary key,
    name         varchar(256)                not null,
    valueOfSales decimal(16, 2) default 0.00 not null
);

create table Customer
(
    idCustomer     int auto_increment
        primary key,
    username       varchar(256)             not null,
    password       varchar(256)             not null,
    email          varchar(256)             not null,
    solvent        tinyint                  not null,
    failedPayments int unsigned default '0' not null,
    constraint email_UNIQUE
        unique (email),
    constraint username_UNIQUE
        unique (username)
);

create table Alert
(
    idAlert     int auto_increment
        primary key,
    lastPayment datetime                not null,
    amount      decimal(11, 2) unsigned not null,
    email       varchar(256)            not null,
    idCustomer  int                     not null,
    username    varchar(256)            not null,
    constraint email_UNIQUE
        unique (email),
    constraint TriggeredBy
        foreign key (idCustomer) references Customer (idCustomer)
            on update cascade on delete cascade
);

create index Trigger_idx
    on Alert (idCustomer);

create definer = admin@localhost trigger update_alert_mvs
    after insert
    on Alert
    for each row
BEGIN
    CALL updateInsolventCustomersReport(NEW.idCustomer);
END;

create definer = admin@localhost trigger update_alert_mvs_2
    after update
    on Alert
    for each row
BEGIN
    CALL updateInsolventCustomersReport(NEW.idCustomer);
END;

create definer = admin@localhost trigger Customer_BEFORE_UPDATE_set_solvent
    before update
    on Customer
    for each row
BEGIN
	IF (OLD.solvent = false AND NEW.solvent = true) THEN
		SET NEW.failedPayments = 0;

        IF (OLD.failedPayments >= 3) THEN
			DELETE FROM Alert AS A WHERE A.idCustomer = OLD.idCustomer;
        END IF;
	END IF;
END;

create table Employee
(
    idEmployee int auto_increment
        primary key,
    username   varchar(256) not null,
    password   varchar(256) not null,
    constraint username_UNIQUE
        unique (username)
);

create table InsolventCustomersReport_mv
(
    idCustomer       int                         not null,
    username         varchar(256)                not null,
    email            varchar(256)                not null,
    idOrder          int                         not null
        primary key,
    startDate        date                        not null,
    creationDateTime datetime                    not null,
    totalCost        decimal(11, 2) default 0.00 not null,
    idPackage        int                         not null,
    idValidity       int                         not null,
    idAlert          int                         null,
    lastPayment      datetime                    null,
    amount           decimal(11, 2)              null
);

create table Package
(
    idPackage int auto_increment
        primary key,
    name      varchar(256) not null,
    constraint index2
        unique (name),
    constraint index3
        unique (name)
);

create definer = admin@localhost trigger update_package_mvs
    after insert
    on Package
    for each row
BEGIN
    /* Create default rows in materialized views */
    INSERT INTO AvgProductsSold_mv (idPackage, name, avgNumOfProducts)
    VALUES (NEW.idPackage, NEW.name, 0);

    INSERT INTO PurchasesPerPackage_mv (idPackage, name, purchases)
    VALUES (NEW.idPackage, NEW.name, 0);

    INSERT INTO TotalSalesValue_mv (idPackage, name, completeValue, partialValue)
    VALUES (NEW.idPackage, NEW.name, 0, 0);
END;

create table Product
(
    idProduct int auto_increment
        primary key,
    name      varchar(256)            not null,
    fee       decimal(11, 2) unsigned not null,
    constraint name_UNIQUE
        unique (name)
);

create table CompatibleProducts
(
    idProduct int not null,
    idPackage int not null,
    primary key (idProduct, idPackage),
    constraint compatibleWith
        foreign key (idPackage) references Package (idPackage)
            on update cascade on delete cascade,
    constraint optional
        foreign key (idProduct) references Product (idProduct)
);

create index compatibleWith_idx
    on CompatibleProducts (idPackage);

create definer = admin@localhost trigger update_product_mvs
    after insert
    on Product
    for each row
BEGIN
    IF ((SELECT COUNT(*) FROM BestSellerProduct_mv) = 0) THEN
        INSERT INTO BestSellerProduct_mv (idProduct, name, valueOfSales)
        VALUES (NEW.idProduct, NEW.name, 0);
    end if;
end;

create table PurchasesPerPackageValidity_mv
(
    hashId     varchar(32)                 not null
        primary key,
    idPackage  int                         not null,
    name       varchar(256)                not null,
    idValidity int                         not null,
    duration   int            default 0    not null,
    fee        decimal(11, 2) default 0.00 not null,
    purchases  int            default 0    not null
);

create table PurchasesPerPackage_mv
(
    idPackage int           not null
        primary key,
    name      varchar(256)  not null,
    purchases int default 0 not null
);

create table Schedule
(
    idSchedule       int auto_increment
        primary key,
    activationDate   date not null,
    deactivationDate date not null,
    idCustomer       int  not null,
    constraint BelongsTo
        foreign key (idCustomer) references Customer (idCustomer)
            on update cascade on delete cascade
);

create index BelongsTo_idx
    on Schedule (idCustomer);

create table ScheduledProducts
(
    idSchedule int not null,
    idProduct  int not null,
    primary key (idSchedule, idProduct),
    constraint PrdouctScheduledIn
        foreign key (idSchedule) references Schedule (idSchedule)
            on update cascade on delete cascade,
    constraint SchedulesProduct
        foreign key (idProduct) references Product (idProduct)
);

create index SchedulesProduct_idx
    on ScheduledProducts (idProduct);

create table Service
(
    idService       int auto_increment
        primary key,
    serviceType     int unsigned                         not null,
    minutes         int unsigned            default '0'  not null,
    extraMinutesFee decimal(11, 2) unsigned default 0.00 not null,
    sms             int unsigned            default '0'  not null,
    extraSmsFee     decimal(11, 2) unsigned default 0.00 not null,
    giga            int unsigned            default '0'  not null,
    extraGigaFee    decimal(11, 2) unsigned default 0.00 not null,
    constraint index2
        unique (serviceType, minutes, extraMinutesFee, sms, extraSmsFee, giga, extraGigaFee)
);

create table IncludedServices
(
    idPackage int not null,
    idService int not null,
    primary key (idService, idPackage),
    constraint IncludedIn
        foreign key (idService) references Service (idService)
            on update cascade on delete cascade,
    constraint Includes
        foreign key (idPackage) references Package (idPackage)
            on update cascade on delete cascade
);

create index IncludedIn_idx
    on IncludedServices (idService);

create index Includes_idx
    on IncludedServices (idPackage);

create table ScheduledServices
(
    idSchedule int not null,
    idService  int not null,
    primary key (idSchedule, idService),
    constraint Schedules
        foreign key (idSchedule) references Schedule (idSchedule)
            on update cascade on delete cascade,
    constraint ServiceScheduledIn
        foreign key (idService) references Service (idService)
            on update cascade on delete cascade
);

create index ServiceScheduledIn_idx
    on ScheduledServices (idService);

create table TotalSalesValue_mv
(
    idPackage     int                         not null
        primary key,
    name          varchar(256)                not null,
    completeValue decimal(16, 2) default 0.00 not null,
    partialValue  decimal(16, 2) default 0.00 not null
);

create table Validity
(
    idValidity int auto_increment
        primary key,
    duration   int                     not null,
    fee        decimal(11, 2) unsigned not null
);

create table CompatibleValidities
(
    idValidity int not null,
    idPackage  int not null,
    primary key (idValidity, idPackage),
    constraint compatible
        foreign key (idValidity) references Validity (idValidity),
    constraint `for`
        foreign key (idPackage) references Package (idPackage)
            on update cascade on delete cascade
);

create index comprises_idx
    on CompatibleValidities (idPackage);

create definer = admin@localhost trigger update_chosen_validity_mvs
    after insert
    on CompatibleValidities
    for each row
BEGIN
    SET @name = (SELECT name FROM Package P WHERE P.idPackage = NEW.idPackage);
    SET @duration = 0;
    SET @fee = 0;
    SELECT duration, fee
    INTO @duration, @fee
    FROM Validity V
    WHERE V.idValidity = NEW.idValidity;

    INSERT INTO PurchasesPerPackageValidity_mv (hashId, idPackage, name, idValidity, duration, fee, purchases)
    VALUES (MD5(CONCAT(NEW.idPackage, NEW.idValidity)), NEW.idPackage, @name, NEW.idValidity, @duration, @fee, 0);
END;

create table `Order`
(
    idOrder          int auto_increment
        primary key,
    startDate        date           not null,
    creationDateTime datetime       not null,
    totalCost        decimal(11, 2) not null,
    paid             tinyint        not null,
    idCustomer       int            not null,
    idPackage        int            not null,
    idValidity       int            not null,
    constraint About
        foreign key (idPackage) references Package (idPackage)
            on update cascade on delete cascade,
    constraint CreatedBy
        foreign key (idCustomer) references Customer (idCustomer)
            on update cascade on delete cascade,
    constraint `With`
        foreign key (idValidity) references Validity (idValidity)
            on update cascade on delete cascade
);

create table ChosenProduct
(
    idOrder   int not null,
    idProduct int not null,
    primary key (idOrder, idProduct),
    constraint AddedTo
        foreign key (idOrder) references `Order` (idOrder),
    constraint Chosen
        foreign key (idProduct) references Product (idProduct)
            on update cascade on delete cascade
);

create index Includes_idx
    on ChosenProduct (idProduct);

create index About_idx
    on `Order` (idPackage);

create index CreatedBy_idx
    on `Order` (idCustomer);

create index With_idx
    on `Order` (idValidity);

create definer = admin@localhost trigger update_order_mvs
    after insert
    on `Order`
    for each row
BEGIN
    IF (NEW.paid = true) THEN
        /* Update TotalSalesValue */
        CALL updateTotalSalesValue(NEW.idPackage, NEW.idValidity, NEW.totalCost);
        /* Update AvgProductsSold */
        CALL updateAvgProductsSold(NEW.idPackage);
        /* Update PurchasesPerPackage */
        CALL updatePurchasesPerPackage(NEW.idPackage);
        /* Update PurchasesPerPackageValidity */
        CALL updatePurchasesPerPackageValidity(NEW.idPackage, NEW.idValidity);
        /* BestSellerProduct */
       CALL updateBestSellerProduct(NEW.idOrder);
    ELSE
        /* InsolventCustomersReport */
        CALL updateInsolventCustomersReport(NEW.idCustomer);
    END IF;
END;

create definer = admin@localhost trigger update_order_mvs_2
    after update
    on `Order`
    for each row
BEGIN
    IF (OLD.paid = false AND NEW.paid = true) THEN
        /* Update TotalSalesValue */
        CALL updateTotalSalesValue(NEW.idPackage, NEW.idValidity, NEW.totalCost);
        /* Update AvgProductsSold */
        CALL updateAvgProductsSold(NEW.idPackage);
        /* Update PurchasesPerPackage */
        CALL updatePurchasesPerPackage(NEW.idPackage);
        /* Update PurchasesPerPackageValidity */
        CALL updatePurchasesPerPackageValidity(NEW.idPackage, NEW.idValidity);
        /* BestSellerProduct */
        CALL updateBestSellerProduct(NEW.idOrder);
        /* InsolventCustomersReport */
        DELETE FROM InsolventCustomersReport_mv WHERE idOrder = NEW.idOrder;
    END IF;
END;

create
    definer = admin@localhost procedure updateAvgProductsSold(IN idPkg int)
BEGIN
    /* Compute average */
    SET @average = 0;
    SELECT AVG(DT1.numOfProducts)
    INTO @average
    FROM
        (SELECT O.idPackage, COUNT(*) AS numOfProducts
        FROM ChosenProduct CP
            JOIN `Order` O ON CP.idOrder = O.idOrder
        WHERE O.idPackage = idPkg
        GROUP BY O.idOrder)
    AS DT1
    GROUP BY DT1.idPackage;

    /* Update with new average */
    UPDATE AvgProductsSold_mv
    SET
        avgNumOfProducts = @average
    WHERE idPackage = idPkg;
END;

create
    definer = admin@localhost procedure updateBestSellerProduct(IN idOrd int)
BEGIN
    /* Get current bestseller product total value */
    SET @currTotalValue = 0;
    SET @currId = 0;
    SELECT idProduct, valueOfSales
    INTO @currId, @currTotalValue
    FROM BestSellerProduct_mv
    ORDER BY valueOfSales DESC
    LIMIT 1;

    /* Compute total value of sales of the new product */
    SET @idProd = 0;
    SET @newTotalValue = 0;
    SELECT P.idProduct, SUM(P.fee * V.duration) AS totalValue
    INTO @idProd, @newTotalValue
    FROM
        (SELECT idProduct FROM ChosenProduct CP WHERE idOrder = idOrd) AS DT1
        JOIN ChosenProduct CP ON DT1.idProduct = CP.idProduct
        JOIN `Order` O ON O.idOrder = CP.idOrder
        JOIN Validity V on O.idValidity = V.idValidity
        JOIN Product P on CP.idProduct = P.idProduct
    WHERE O.paid = true
    GROUP BY P.idProduct
    ORDER BY totalValue DESC
    LIMIT 1;

    SET @newName = (SELECT name FROM Product WHERE idProduct = @idProd);

    /* Update the best seller product */
    IF (@currTotalValue < @newTotalValue) THEN
        IF (@currId = @idProd) THEN
            UPDATE BestSellerProduct_mv
            SET valueOfSales = @newTotalValue
            WHERE idProduct = @idProd;
        ELSE
            INSERT INTO BestSellerProduct_mv(idProduct, name, valueOfSales)
            VALUES (@idProd, @newName, @newTotalValue);

            DELETE FROM BestSellerProduct_mv WHERE idProduct != @idProd;
        END IF;
    END IF;
END;

create
    definer = admin@localhost procedure updateInsolventCustomersReport(IN idCus int)
BEGIN
    INSERT INTO InsolventCustomersReport_mv (idCustomer, username, email, idOrder, startDate, creationDateTime, totalCost, idPackage, idValidity, idAlert, lastPayment, amount)
    SELECT *
    FROM
        (SELECT
            C.idCustomer,
            C.username,
            C.email,
            O.idOrder,
            O.startDate,
            O.creationDateTime,
            O.totalCost,
            O.idPackage,
            O.idValidity,
            A.idAlert,
            A.lastPayment,
            A.amount
        FROM
            Customer C
            JOIN `Order` O ON C.idCustomer = O.idCustomer
            LEFT JOIN Alert A ON A.idCustomer = C.idCustomer
        WHERE
            O.paid = false AND O.idCustomer = idCus)
    AS DT1
    ON DUPLICATE KEY UPDATE
        idAlert = DT1.idAlert,
        amount = DT1.amount,
        lastPayment = DT1.lastPayment;
END;

create
    definer = admin@localhost procedure updatePurchasesPerPackage(IN idPkg int)
BEGIN
    /* Get current purchases */
    SET @purchases = 0;
    SELECT purchases
    INTO @purchases
    FROM PurchasesPerPackage_mv
    WHERE idPackage = idPkg;

    /* Update with the incremented number of purchases */
    UPDATE PurchasesPerPackage_mv
    SET purchases = @purchases + 1
    WHERE idPackage = idPkg;
END;

create
    definer = admin@localhost procedure updatePurchasesPerPackageValidity(IN idPkg int, IN idVal int)
BEGIN
    /* Get current purchases */
    SET @purchases = 0;
    SELECT purchases
    INTO @purchases
    FROM PurchasesPerPackageValidity_mv
    WHERE hashId = MD5(CONCAT(idPkg, idVal));

    /* Update with the incremented number of purchases */
    UPDATE PurchasesPerPackageValidity_mv
    SET
        purchases = @purchases + 1
    WHERE idPackage = idPkg AND idValidity = idVal;
END;

create
    definer = admin@localhost procedure updateTotalSalesValue(IN idPkg int, IN idVal int, IN totVal int)
BEGIN
    /* Get old values */
    SET @completeValue = 0;
    SET @partialValue = 0;
    SELECT completeValue, partialValue
    INTO @completeValue, @partialValue
    FROM TotalSalesValue_mv
    WHERE idPackage = idPkg;

    /* Get deltas */
    SET @deltaCompleteValue = totVal;
    SET @deltaPartialValue = 0;
    SELECT duration * fee
    INTO @deltaPartialValue
    FROM Validity
    WHERE idValidity = idVal;

    /* Update with new values */
    UPDATE TotalSalesValue_mv
    SET
        completeValue = @completeValue + @deltaCompleteValue,
        partialValue = @partialValue + @deltaPartialValue
    WHERE idPackage = idPkg;
END;

